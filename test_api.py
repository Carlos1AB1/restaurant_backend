"""
Script de prueba para verificar que la API devuelve las im√°genes de categor√≠as
"""
import requests
import json

def test_categories_api():
    """
    Prueba el endpoint de categor√≠as para verificar que incluye las im√°genes
    """
    try:
        # URL del endpoint de categor√≠as
        url = "http://localhost:8000/api/menu/categories/"
        
        print("üîç Probando endpoint de categor√≠as...")
        print(f"URL: {url}")
        
        # Hacer petici√≥n GET
        response = requests.get(url)
        
        if response.status_code == 200:
            print("‚úÖ Respuesta exitosa!")
            
            # Parsear JSON
            data = response.json()
            
            # Verificar si es paginado o lista directa
            if isinstance(data, dict) and 'results' in data:
                categories = data['results']
                print(f"üìã Categor√≠as encontradas (paginado): {len(categories)}")
            else:
                categories = data
                print(f"üìã Categor√≠as encontradas: {len(categories)}")
            
            # Mostrar cada categor√≠a y su imagen
            for i, category in enumerate(categories, 1):
                print(f"\n{i}. {category.get('name', 'Sin nombre')}")
                print(f"   Slug: {category.get('slug', 'N/A')}")
                print(f"   Activa: {category.get('is_active', 'N/A')}")
                
                image = category.get('image')
                if image:
                    print(f"   ‚úÖ Imagen: {image}")
                else:
                    print(f"   ‚ùå Sin imagen")
                    
                description = category.get('description')
                if description:
                    print(f"   Descripci√≥n: {description[:50]}...")
            
            # Verificar campos esperados
            if categories:
                first_category = categories[0]
                expected_fields = ['id', 'name', 'slug', 'image', 'is_active']
                missing_fields = []
                
                for field in expected_fields:
                    if field not in first_category:
                        missing_fields.append(field)
                
                if missing_fields:
                    print(f"\n‚ö†Ô∏è  Campos faltantes en la respuesta: {missing_fields}")
                else:
                    print(f"\n‚úÖ Todos los campos esperados est√°n presentes")
                    
        else:
            print(f"‚ùå Error en la respuesta: {response.status_code}")
            print(f"Respuesta: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: No se pudo conectar al servidor")
        print("Aseg√∫rate de que el servidor Django est√© corriendo en http://localhost:8000")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

def test_products_api():
    """
    Prueba el endpoint de productos para verificar que incluye las im√°genes
    """
    try:
        url = "http://localhost:8000/api/menu/products/"
        
        print("\nüîç Probando endpoint de productos...")
        print(f"URL: {url}")
        
        response = requests.get(url, params={'limit': 3})  # Solo 3 productos para prueba
        
        if response.status_code == 200:
            print("‚úÖ Respuesta exitosa!")
            
            data = response.json()
            
            if isinstance(data, dict) and 'results' in data:
                products = data['results']
                print(f"üìã Productos encontrados (paginado): {len(products)}")
            else:
                products = data
                print(f"üìã Productos encontrados: {len(products)}")
            
            for i, product in enumerate(products[:3], 1):  # Solo mostrar primeros 3
                print(f"\n{i}. {product.get('name', 'Sin nombre')}")
                print(f"   Categor√≠a: {product.get('category', 'N/A')}")
                print(f"   Precio: {product.get('price', 'N/A')} ‚Ç¨")
                
                image = product.get('image')
                if image:
                    print(f"   ‚úÖ Imagen: {image}")
                else:
                    print(f"   ‚ùå Sin imagen")
                    
        else:
            print(f"‚ùå Error en la respuesta: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    print("üöÄ Probando API del Restaurante")
    print("=" * 50)
    
    test_categories_api()
    test_products_api()
    
    print("\n" + "=" * 50)
    print("‚úÖ Pruebas completadas!")
    print("\nüí° Pr√≥ximos pasos:")
    print("1. Si las categor√≠as no tienen im√°genes, ve al admin de Django")
    print("2. Edita cada categor√≠a y sube una imagen")
    print("3. El frontend usar√° autom√°ticamente estas im√°genes")
